@page "/PaymentMethods/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@inject AuthenticationStateProvider AuthenticationStateProvider
@using System.Security.Claims

<h3>Payment Methods</h3>
<a href="/PaymentMethods/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New PaymentMethod
</a>
<br />
<br />

@if (PaymentMethods == null)
{
    <div class=" = " alert alert-info>Loading PaymentMethods...</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var PaymentMethod in PaymentMethods)
            {
                @if (PaymentMethod.Name == _currentUserName)
                {
                    <tr>
                        <td>@PaymentMethod.Id</td>
                        <td>@PaymentMethod.Name</td>
                        <td>
                            <a href="/PaymentMethods/view/@PaymentMethod.Id" class="btn btn-primary">
                                <span class="oi oi-book"></span>
                            </a>
                            <a href="/PaymentMethods/edit/@PaymentMethod.Id" class="btn btn-warning">
                                <span class="oi oi-pencil"></span>
                            </a>
                            <button class="btn btn-danger" @onclick="@(()=>Delete(PaymentMethod.Id))">
                                <span class="oi oi-delete"></span>
                            </button>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
}

@code {
    private List<PaymentMethod> PaymentMethods;
    private List<AppUser> AppUsers;
    private IEnumerable<Claim> _claims = Enumerable.Empty<Claim>();
    private string _currentUserName;

    protected async override Task OnInitializedAsync()
    {
        PaymentMethods = await _client.GetFromJsonAsync<List<PaymentMethod>>($"{Endpoints.PaymentMethodsEndpoint}");

        AppUsers = await _client.GetFromJsonAsync<List<AppUser>>($"{Endpoints.AccountsEndpoint}");
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            _claims = user.Claims;
            //_currentUserName = user.Identity.Name;
            if (_claims.Count() > 0)
            {
                foreach (var claim in _claims)
                {
                    if (claim.Type == "name")
                    {
                        _currentUserName = claim.Value;
                        continue;
                    }
                }
            }
        }
    }

    async Task Delete(int PaymentMethodId)
    {
        var PaymentMethod = PaymentMethods.First(q => q.Id == PaymentMethodId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {PaymentMethod.Name}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.PaymentMethodsEndpoint}/{PaymentMethodId}");
            await OnInitializedAsync();
        }
    }
}
